// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Student{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  age Int
  course String
  year Int
  subjects String[]
}

model Products{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  category String
  price Int
  stock Int
  rating Int[]
  supplierId String @db.ObjectId
  supplier Supplier @relation(fields: [supplierId], references: [id])
}

model Supplier{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  country String
  products Products[]
}





model Team{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  members Member[]
}

model Member{
 id String @id @default(auto()) @map("_id") @db.ObjectId
 name String
 role String
 teamId String @db.ObjectId
 team Team @relation(fields: [teamId], references: [id])
 message Message[]
}

model Message{
 id String @id @default(auto()) @map("_id") @db.ObjectId
 content String 
 createdAt DateTime @default(now())
 reactions Reaction[]
 memberId String @db.ObjectId
 member Member @relation(fields: [memberId], references: [id])

}

model Reaction{
 id String @id @default(auto()) @map("_id") @db.ObjectId
 emoji String
 messageId String @db.ObjectId
 message Message @relation(fields: [messageId], references: [id])
}


model User{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  post Post[]
  likes Likes[]
  comments Comments[]
}

model Post{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id])
  likes Likes[]
  comments Comments[]
  createdAt DateTime @default(now())
}

model Likes{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  postId String? @db.ObjectId
  commentId String? @db.ObjectId
  userId String @db.ObjectId
  post Post? @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])
  comments Comments? @relation(fields: [commentId], references: [id])
}


model Comments{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  postId String @db.ObjectId
  userId String @db.ObjectId
  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])
  text String
  likes Likes[]
}


